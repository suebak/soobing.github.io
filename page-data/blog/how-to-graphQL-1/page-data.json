{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/how-to-graphQL-1","result":{"data":{"site":{"siteMetadata":{"title":"soobing","author":"Sue Soobin Bak"}},"markdownRemark":{"html":"<h1>GraphQL schemas</h1>\n<p>GraphQL schemas는 <a href=\"https://www.prisma.io/blog/graphql-sdl-schema-definition-language-6755bcb9ce51\">SDL(Schema Definition Language)</a> 로 작성되어 있다. SDL은 data structures를 정의할 수 있게 타입시스템이 있다.</p>\n<h2>모든 GraphQL schema는 3개의 root type이 있다.</h2>\n<ul>\n<li><code>Query</code>, <code>Mutation</code>, <code>Subscription</code></li>\n<li>root type이란 GraphQL API에서 쿼리 시작점이라고 이해하면 편하다. <del>(슈빈피셜)</del> 무슨 말인지 모르겠으면 일단 3가지를 기억하고 아래 예제 2번을 봐보자!</li>\n<li>그리고 기억할 키워드가 하나 더 있는데, root type(Query or Mutation or Subscription)에서 가장 상단에 위치한 field를 <b>root field</B> 라고 하며 GraphQL API operations을 정의한다.</li>\n<li>\n<p><code>Query</code>, <code>Mutation</code>, <code>Subscription</code> 모두 GraphQL API에 전송하면 root field 부터 시작한다.</p>\n<ul>\n<li>예제 1</li>\n<li>root field: 1개(info)</li>\n<li>\n<p>API에서 쿼리할 수 있는 것은 info단 한가지 뿐</p>\n<pre><code>type Query {\ninfo: String!\n}\n</code></pre>\n</li>\n<li>예제 2</li>\n<li>root field: 3개(users, user, createUser)</li>\n<li>User 타입은 뭔가? Query, Mutation, Subscription도 아닌 것이 이렇게 정의 될 수 있는가? 싶겠지만! 사용자 정의 타입이라고 보면 된다. Query 내부에서 User 타입이 쓰이고 있는 것을 볼 수 있다.</li>\n<li>\n<p>User 타입은 root type이 아니기떄문에(= root type에서 쓰일 타입이란 이야기) root field를 가지고 있지 않다.</p>\n<pre><code>type Query {\nusers: [User!]!\nuser(id: ID!): User\n}\n</code></pre>\n</li>\n</ul>\n<p>type Mutation {\ncreateUser(name: String!): User!\n}</p>\n<p>type User {\nid: ID!\nname: String!\n}</p>\n<pre><code>## GraphQL 서버 만들기\n</code></pre>\n</li>\n<li>\n<p>graphql-yoga를 설치한다.</p>\n<pre><code>graphql-yoga\n</code></pre>\n</li>\n<li>\n<p><code>src/index.js</code> 에 아래와 같이 코드를 작성하여 graphQL 서버를 만들어 준다.</p>\n<pre><code>const { GraphQLServer } = require('graphql-yoga')\n\n// schema: 정의만 하는 곳이라고 생각하면 됨\nconst typeDefs = `\ntype Query {\n  info: String!\n}\n`\n\n// resolvers: GraphQL schema의 실제 구현체\nconst resolvers = {\n  Query: {\n    info: () => `This is the API of a Hackernews Clone`\n  }\n}\n\n// schema와 resolvers는 graphQL 서버에 전달되서 실행된다.\nconst server = new GraphQLServer({\n  typeDefs,\n  resolvers,\n})\nserver.start(() => console.log(`Server is running on http://localhost:4000`))\n</code></pre>\n<h2>GraphQL 서버 실행</h2>\n<ul>\n<li><code>node src/index.js</code> (node.js는 당연히 깔려있다고 가정~)</li>\n</ul>\n<h1>Query 해보기</h1>\n<h2>GraphQL에서 query</h2>\n<ul>\n<li>\n<p><a href=\"http://localhost:4000\">http://localhost:4000</a> 에서 재생버튼을 누르고 왼쪽 영역에서 info를 쿼리해보자</p>\n<pre><code># Write your query or mutation here\nquery {\ninfo\n}\n</code></pre>\n<h2>resolver와 typeDefs와의 관계</h2>\n</li>\n<li>Typescript 처럼 먼저 타입을 정의해 놓는 곳이 typeDefs이고,\nresolver는 실제 구현체이다. 그래서 정의해놓은 타입대로 resolver를 구현하지 않으면 에러를 뱉는다.</li>\n<li>\n<p><code>src/index.js</code> 에서 resolver를 이렇게 바꿔보자</p>\n<pre><code>const resolvers = {\n  Query: {\n    info: () => null\n  }\n}\n</code></pre>\n</li>\n<li>\n<p>결과를 확인하려면 서버를 재실행해야한다. (<code>control + c</code> 해서 서버를 끈뒤, <code>node src/index.js</code> 다시켠다.)</p>\n<h2>Docs와 Schema</h2>\n</li>\n<li>오른쪽에 docs와 schema를 볼 수 있는 기능이 있다.</li>\n</ul>\n</li>\n</ul>","id":"2dce826a-c6cd-5ef9-8664-af657b7b9aab","excerpt":"GraphQL schemas GraphQL schemas는 SDL(Schema Definition Language) 로 작성되어 있다. SDL은 data structures를 정의할 수 있게 타입시스템이 있다. 모든 GraphQL schema는 3개의 root type…","frontmatter":{"date":"March 24, 2020","path":"/blog/how-to-graphQL-1","title":"graphQL을 사용해보자","description":"GraphQL schemas","image":null}}},"pageContext":{}}}