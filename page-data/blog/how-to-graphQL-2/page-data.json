{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/how-to-graphQL-2","result":{"data":{"site":{"siteMetadata":{"title":"soobing","author":"Sue Soobin Bak"}},"markdownRemark":{"html":"<h1>Type</h1>\n<p>GraphQL은 어느 언어에서도 사용할 수 있도록하기 위해 자체적으로 query 언어를 만들었다.\n자체적으로 언어를 만들었으니 타입이 있겠지?\n타입은 크게 3가지가 있다.</p>\n<ol>\n<li>\n<p>Object types 2) Scalars 3) Enums </p>\n<h2>Object types</h2>\n</li>\n<li>Object type은 Query, Mutation, Input 타입들 까지 포함하고, 직접 Object 타입을 만들 수 도 있다.</li>\n<li>\n<p>Object typee들은 모두 Arguments(매개변수)들을 받을 수 있다. 안받아도 상관없고~</p>\n<h3>Query Type</h3>\n<h3>Mutation Type</h3>\n<h3>Input type</h3>\n</li>\n</ol>\n<h2>Scalars</h2>\n<h2>Enums</h2>\n<h1>Type modifier</h1>\n<p>Type modifier에는 <code>!</code>와 <code>[]</code>가 있다.</p>\n<h1>Interfaces</h1>\n<h1>Union types</h1>\n<h1>GraphQL schemas</h1>\n<p>GraphQL schemas는 <a href=\"https://www.prisma.io/blog/graphql-sdl-schema-definition-language-6755bcb9ce51\">SDL(Schema Definition Language)</a> 로 작성되어 있다. SDL은 data structures를 정의할 수 있게 타입시스템이 있다.</p>\n<h2>모든 GraphQL schema는 3개의 root type이 있다.</h2>\n<ul>\n<li><code>Query</code>, <code>Mutation</code>, <code>Subscription</code></li>\n<li>root type이란 GraphQL API에서 쿼리 시작점이라고 이해하면 편하다. <del>(슈빈피셜)</del> 무슨 말인지 모르겠으면 일단 3가지를 기억하고 아래 예제 2번을 봐보자!</li>\n<li>그리고 기억할 키워드가 하나 더 있는데, root type(Query or Mutation or Subscription)에서 가장 상단에 위치한 field를 <b>root field</B> 라고 하며 GraphQL API operations을 정의한다.</li>\n<li>\n<p><code>Query</code>, <code>Mutation</code>, <code>Subscription</code> 모두 GraphQL API에 전송하면 root field 부터 시작한다.</p>\n<ul>\n<li>예제 1</li>\n<li>root field: 1개(info)</li>\n<li>\n<p>API에서 쿼리할 수 있는 것은 info단 한가지 뿐</p>\n<pre><code>type Query {\ninfo: String!\n}\n</code></pre>\n</li>\n<li>예제 2</li>\n<li>root field: 3개(users, user, createUser)</li>\n<li>User 타입은 뭔가? Query, Mutation, Subscription도 아닌 것이 이렇게 정의 될 수 있는가? 싶겠지만! 사용자 정의 타입이라고 보면 된다. Query 내부에서 User 타입이 쓰이고 있는 것을 볼 수 있다.</li>\n<li>\n<p>User 타입은 root type이 아니기떄문에(= root type에서 쓰일 타입이란 이야기) root field를 가지고 있지 않다.</p>\n<pre><code>type Query {\nusers: [User!]!\nuser(id: ID!): User\n}\n</code></pre>\n</li>\n</ul>\n<p>type Mutation {\ncreateUser(name: String!): User!\n}</p>\n<p>type User {\nid: ID!\nname: String!\n}</p>\n<pre><code></code></pre>\n</li>\n</ul>","id":"2dce826a-c6cd-5ef9-8664-af657b7b9aab","excerpt":"Type GraphQL은 어느 언어에서도 사용할 수 있도록하기 위해 자체적으로 query 언어를 만들었다.\n자체적으로 언어를 만들었으니 타입이 있겠지? \n타입은 크게 3가지가 있다. Object types 2) Scalars 3) Enums  Object types Object type…","frontmatter":{"date":"March 24, 2020","path":"/blog/how-to-graphQL-2","title":"graphQL #2 용어정리","description":"GraphQL schemas","image":null}}},"pageContext":{}}}